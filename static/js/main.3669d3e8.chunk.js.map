{"version":3,"sources":["components/Toast/Toast.js","service/axiosClient.js","constants/Constants.js","components/Auth/Auth.js","components/Auth/PrivateRoute.js","components/Auth/RestrictedRoute.js","components/Loadable/LoadingIcon.js","components/Loadable/Loadable.js","App.js","serviceWorker.js","index.js"],"names":["options","position","toast","POSITION","TOP_RIGHT","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","customToast","info","text","success","warn","error","err","msg","status","data","message","toString","axios","interceptors","request","use","config","newConfig","paramsSerializer","params","queryString","stringify","obj","Object","keys","forEach","k","arrayFormat","baseURL","process","headers","Pragma","localStorage","getItem","ACCESS_TOKEN","Authorization","console","log","Promise","reject","response","auth","redirectToLoginPage","ACTION_ADD","ACTION_EDIT","ROLES","ROLE_USER","ROLE_ADMIN","ROLE_SONG_MANAGER","MENU_ITEMS","name","path","key","level","enabled","subItems","ROLE_TABLE","ROLE_STORE_MANAGER","NO_LYRIC","isAuthenticated","login","successCallback","failCallback","username","password","axiosClient","post","then","res","setItem","catch","logoutOld","removeItem","window","location","Toast","logout","getMe","get","hash","rolesHasPermission","roles","role","includes","this","userInfo","PrivateRoute","Component","component","rest","render","props","roleArray","pathname","to","state","from","RestrictedRoute","LoadingIcon","show","fullscreen","className","Loading","onClick","retry","timedOut","pastDelay","Nav","loadable","fallback","Home","Song","About","Login","NotFound","App","setState","exact","Loadable","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mIAAA,YAGMA,GAHN,MAGgB,CACdC,SAAUC,IAAMC,SAASC,UACzBC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IA6BNC,EAAc,CAClBC,KA3BW,SAACC,GACZZ,IAAMW,KAAKC,EAAMd,IA2BjBe,QAxBc,SAACD,GACfZ,IAAMa,QAAQD,EAAMd,IAwBpBgB,KArBW,SAACF,GACZZ,IAAMc,KAAKF,EAAMd,IAqBjBiB,MAlBY,SAACC,GAMb,IAAIC,EAJAD,GAAOA,EAAIE,QAAyB,MAAfF,EAAIE,SAKKD,EAA9BD,EAAIG,MAAQH,EAAIG,KAAKC,QAAeJ,EAAIG,KAAKC,QACxCJ,EAAWA,EAAIK,WACb,oCAEXrB,IAAMe,MAAME,EAAKnB,MAUJY,O,4FChCfY,IAAMC,aAAaC,QAAQC,KACzB,SAAUC,GACR,IAAMC,EAAS,2BACVD,GAAM,IACTE,iBAAkB,SAACC,GAAM,OACvBC,IAAYC,WAdAC,EAcqBH,EAbvCI,OAAOC,KAAKF,GAAKG,SAAQ,SAACC,GACT,OAAXJ,EAAII,SAA0B3B,IAAXuB,EAAII,WAClBJ,EAAII,MAGRJ,GAQyC,CAAEK,YAAa,WAd9C,IAACL,GAedM,QAASC,wBAETC,QAAQ,2BACHd,EAAOc,SAAO,IACjBC,OAAQ,eASZ,OAJIC,aAAaC,QAAQC,OACvBjB,EAAUa,QAAQK,cAAa,iBAAaH,aAAaC,QAAQC,OAG5DjB,KAET,SAACZ,GAEC,OADA+B,QAAQC,IAAIhC,GACLiC,QAAQC,OAAOlC,MAmB1BO,IAAMC,aAAa2B,SAASzB,KAC1B,SAACyB,GACC,OAAIA,GAAYA,EAAS/B,KAAa+B,EAAS/B,KACxC+B,KAET,SAACnC,GACC,OAAIA,EAAMmC,UAAYnC,EAAMmC,SAAShC,QACL,MAA1BH,EAAMmC,SAAShC,QACjBiC,IAAKC,oBAAoBrC,EAAMmC,UAG1BF,QAAQC,OAAOlC,EAAMmC,WAErBF,QAAQC,OAAOlC,MAKbO,MAAK,G,+BC1EpB,4MAAO,IAAMsB,EAAe,QAEfS,EAAa,MACbC,EAAc,OAEdC,EAAQ,CACnBC,UAAW,OACXC,WAAY,QACZC,kBAAmB,gBAGRC,EAAa,CACxB,CACEC,KAAM,OACNC,KAAM,IACNC,IAAK,OACLC,MAAO,EACPC,SAAS,EACTC,SAAU,MAEZ,CACEL,KAAM,OACNC,KAAM,QACNC,IAAK,OACLC,MAAO,EACPC,SAAS,EACTC,SAAU,MAEZ,CACEL,KAAM,QACNC,KAAM,SACNC,IAAK,QACLC,MAAO,EACPC,SAAS,EACTC,SAAU,OAKDC,EAAa,CACxB,QAAS,CAACX,EAAMC,WAChB,SAAU,CAACD,EAAMY,oBACjB,cAAe,CAACZ,EAAMC,YAGXY,EAAW,c,6KCyCbjB,EAAO,IAjFR,aACR,aAAe,yBAIfkB,gBAAkB,WAEhB,QADqB3B,aAAaC,QAAQC,MAE1C,KAEF0B,MAAQ,WAAyBC,EAAiBC,GAAkB,IAC5DrD,EAAO,CACXsD,SAFe,EAARA,SAGPC,SAHyB,EAARA,UAKnBC,IACGC,KAAK,cAAezD,GACpB0D,MAAK,SAACC,GACLpC,aAAaqC,QAAQnC,IAAckC,EAAI3D,KAAKyB,MAC5C2B,OAEDS,OAAM,SAAChE,GACNwD,EAAaxD,EAAIG,KAAOH,EAAIG,KAAOH,OAEvC,KAEFiE,UAAY,WACVN,IACGC,KAAK,gBACLC,MAAK,SAACC,GACLpC,aAAawC,WAAWtC,KACxBuC,OAAOC,SAAW,OAEnBJ,OAAM,SAAChE,GACNqE,IAAMtE,MAAMC,OAEhB,KAEFsE,OAAS,WACP5C,aAAawC,WAAWtC,KACxBuC,OAAOC,SAAW,KAClB,KAEFG,MAAQ,WACN,OAAOZ,IAAYa,IAAI,aACvB,KAEFpC,oBAAsB,SAACF,GACjBR,aAAaC,QAAQC,MACvByC,IAAMtE,MAAM,kCACZ2B,aAAawC,WAAWtC,MACfM,GAAYA,EAAS/B,KAC9BkE,IAAMtE,MAAMmC,EAAS/B,KAAKC,SAE1BiE,IAAM1E,KAAK,4BAEbwE,OAAOC,SAASK,KAAO,UACvB,KAOFC,mBAAqB,SAACC,EAAO9B,GAC3B,IAAKK,IAAWL,GAAO,OAAO,EAAK,IACX,EADW,cAChB8B,GAAK,IAAxB,2BAA0B,CAAC,IAAhBC,EAAI,QACb,GAAI1B,IAAWL,GAAMgC,SAASD,GAE5B,OAAO,GAOX,8BACA,OAAO,GA3EPE,KAAKC,SAAW,U,+NCiCLC,EApCM,SAAH,GAAqD,IAApCC,EAAS,EAApBC,UAAsBH,EAAQ,EAARA,SAAaI,EAAI,iBAC7D,OAGE,kBAAC,IAAK,iBACAA,EAAI,CACRC,OAAQ,SAACC,GACP,OAAKlD,IAAKkB,kBAWR0B,IACC5C,IAAKuC,mBAAmBK,EAASO,UAAWD,EAAMjB,SAASmB,UAI1D,6BACE,oDACA,8EAIG,kBAACN,EAAS,iBAAKI,EAAK,CAAEN,SAAUA,KAnBrC,kBAAC,IAAQ,CACPS,GAAI,CACFD,SAAU,SACVE,MAAO,CAAEC,KAAML,EAAMjB,kB,gBCAtBuB,EAbS,SAAH,GAA2C,IAA1BV,EAAS,EAApBC,UAAyBC,EAAI,iBACtD,OAGE,kBAAC,IAAK,iBACAA,EAAI,CACRC,OAAQ,SAACC,GAAK,OACZlD,IAAKkB,kBAAoB,kBAAC,IAAQ,CAACmC,GAAG,MAAS,kBAACP,EAAcI,Q,QCUvDO,G,MAfK,SAACP,GACnB,IAAQQ,EAA4BR,EAA5BQ,KAAK,EAAuBR,EAAtBS,WACRC,OADkB,OAAO,EACA,aAAe,GAC9C,OAAOF,EACL,yBAAKE,UAAWA,GACd,yBAAKA,UAAU,YACb,8BACA,8BACA,8BACA,gCAGF,OCdAC,EAAU,SAACX,GACf,OAAIA,EAAMtF,MAEN,uCACS,4BAAQkG,QAASZ,EAAMa,OAAM,UAG/Bb,EAAMc,SAEb,sDACwB,4BAAQF,QAASZ,EAAMa,OAAM,UAG9Cb,EAAMe,UACR,kBAAC,EAAW,CAACP,MAAM,IAEnB,MAMEQ,EAAMC,aAAS,kBAAM,gCAAoC,CACpEC,SAAUP,EAAQ,CAChBI,WAAW,EACXrG,OAAO,EACPoG,UAAU,MAIDK,EAAOF,aAAS,kBAAM,gCAAiC,CAClEC,SAAUP,EAAQ,CAChBI,WAAW,EACXrG,OAAO,EACPoG,UAAU,MAIDM,EAAOH,aAAS,kBAAM,sDAAiC,CAClEC,SAAUP,EAAQ,CAChBI,WAAW,EACXrG,OAAO,EACPoG,UAAU,MAIDO,EAAQJ,aAAS,kBAAM,gCAAmC,CACrEC,SAAUP,EAAQ,CAChBI,WAAW,EACXrG,OAAO,EACPoG,UAAU,MAIDQ,EAAQL,aAAS,kBAAM,gCAAmC,CACrEC,SAAUP,EAAQ,CAChBI,WAAW,EACXrG,OAAO,EACPoG,UAAU,MAIDS,EAAWN,aAAS,kBAAM,gCAAyC,CAC9EC,SAAUP,EAAQ,CAChBI,WAAW,EACXrG,OAAO,EACPoG,UAAU,MCdCU,G,YA9CN,kDACP,WAAYxB,GAAQ,IAAD,EAIf,OAJe,qBACjB,cAAMA,IACDI,MAAQ,CACXV,SAAU,MACV,EAsCH,OArCA,8CAED,WAAqB,IAAD,OACM5C,IAAKkB,mBAE3BlB,IACGoC,QACAV,MAAK,SAACC,GACL,EAAKgD,SAAS,CACZ/B,SAAUjB,EAAI3D,UAGjB6D,OAAM,SAAChE,GACN8B,QAAQC,IAAI,UAAW/B,QAG9B,oBAED,WACE,IAAQ+E,EAAaD,KAAKW,MAAlBV,SACR,OACE,kBAAC,IAAU,KACT,yBAAKgB,UAAU,OACb,kBAAC,EAAY,CAAChB,SAAUA,IACxB,yBAAKgB,UAAU,eACb,kBAAC,IAAM,KACL,kBAAC,IAAK,CAACgB,OAAK,EAAClE,KAAK,IAAIqC,UAAW8B,IACjC,kBAAC,IAAK,CAACD,OAAK,EAAClE,KAAK,SAASqC,UAAW8B,IACtC,kBAAC,EAAe,CAACD,OAAK,EAAClE,KAAK,SAASqC,UAAW8B,IAChD,kBAAC,EAAY,CAACD,OAAK,EAAClE,KAAK,QAAQqC,UAAW8B,EAAejC,SAAUA,IACrE,kBAAC,IAAK,CAAClC,KAAK,GAAGqC,UAAW8B,OAIhC,kBAAC,IAAc,WAGpB,EA3CM,CAAS/B,cCEEgC,QACW,cAA7B9C,OAAOC,SAAS8C,UAEe,UAA7B/C,OAAOC,SAAS8C,UAEhB/C,OAAOC,SAAS8C,SAASC,MACvB,2D,MCXNC,IAAShC,OACP,kBAAC,IAAMiC,WAAU,KACf,kBAAC,EAAG,OAENC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEd5D,OAAM,SAAAjE,GACL+B,QAAQ/B,MAAMA,EAAMK,c","file":"static/js/main.3669d3e8.chunk.js","sourcesContent":["import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\n\nconst options = {\n  position: toast.POSITION.TOP_RIGHT, //\"top-right\"\n  autoClose: 3000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined\n};\n\nconst info = (text) => {\n  toast.info(text, options);\n};\n\nconst success = (text) => {\n  toast.success(text, options);\n};\n\nconst warn = (text) => {\n  toast.warn(text, options);\n};\n\nconst error = (err) => {\n  // console.log('err', err);\n  if (err && err.status && err.status === 401) {\n    // Đã handle bên axios.interceptors.response rồi\n    return;\n  }\n  let msg;\n  if (err.data && err.data.message) msg = err.data.message;\n  else if (err) msg = err.toString();\n  else msg = 'Error: unexpected error occurred!';\n  // console.log('Error: ', msg); // For debugging only\n  toast.error(msg, options);\n};\n\nconst customToast = {\n  info,\n  success,\n  warn,\n  error\n};\n\nexport default customToast;\n","import axios from 'axios';\nimport queryString from 'query-string';\nimport { ACCESS_TOKEN } from '../constants/Constants';\nimport { auth } from '../components/Auth/Auth';\n\nconst cleanParam = (obj) => {\n  Object.keys(obj).forEach((k) => {\n    if (obj[k] === null || obj[k] === undefined) {\n      delete obj[k];\n    }\n  });\n  return obj;\n};\n\naxios.interceptors.request.use(\n  function (config) {\n    const newConfig = {\n      ...config,\n      paramsSerializer: (params) =>\n        queryString.stringify(cleanParam(params), { arrayFormat: 'repeat' }),\n      baseURL: process.env.REACT_APP_HOST_API,\n      // withCredentials: true,\n      headers: {\n        ...config.headers,\n        Pragma: 'no-cache'\n      }\n    };\n\n    // Add auth token\n    if (localStorage.getItem(ACCESS_TOKEN)) {\n      newConfig.headers.Authorization = `Bearer ${localStorage.getItem(ACCESS_TOKEN)}`;\n    }\n\n    return newConfig;\n  },\n  (error) => {\n    console.log(error);\n    return Promise.reject(error);\n  }\n);\n\n/*\nerror.response sẽ có dạng:\n{\n  \"data\": \"Unauthorized.\",\n  \"status\": 401,\n  \"statusText\": \"Unauthorized\",\n  \"headers\": {\n      \"cache-control\": \"no-cache, private\",\n      \"content-length\": \"17\",\n      \"content-type\": \"text/html; charset=UTF-8\"\n  },\n  \"config\": {...},\n  \"request\": {}\n}\n*/\naxios.interceptors.response.use(\n  (response) => {\n    if (response && response.data) return response.data;\n    return response;\n  },\n  (error) => {\n    if (error.response && error.response.status) {\n      if (error.response.status === 401) {\n        auth.redirectToLoginPage(error.response);\n      }\n      //... handle other statuses\n      return Promise.reject(error.response);\n    } else {\n      return Promise.reject(error);\n    }\n  }\n);\n\nexport default axios;\n","export const ACCESS_TOKEN = 'token';\n\nexport const ACTION_ADD = 'ADD';\nexport const ACTION_EDIT = 'EDIT';\n\nexport const ROLES = {\n  ROLE_USER: 'USER',\n  ROLE_ADMIN: 'ADMIN',\n  ROLE_SONG_MANAGER: 'SONG_MANAGER'\n};\n\nexport const MENU_ITEMS = [\n  {\n    name: 'Home',\n    path: '/',\n    key: 'home',\n    level: 1,\n    enabled: true,\n    subItems: null\n  },\n  {\n    name: 'Song',\n    path: '/song',\n    key: 'song',\n    level: 1,\n    enabled: true,\n    subItems: null\n  },\n  {\n    name: 'About',\n    path: '/about',\n    key: 'about',\n    level: 1,\n    enabled: true,\n    subItems: null\n  }\n];\n\n// Những URL nào ko có trong này là public URL, role nào cũng access được\nexport const ROLE_TABLE = {\n  '/book': [ROLES.ROLE_USER],\n  '/staff': [ROLES.ROLE_STORE_MANAGER],\n  '/fetch-demo': [ROLES.ROLE_USER]\n};\n\nexport const NO_LYRIC = '[No lyric]';\n","import { ACCESS_TOKEN } from '../../constants/Constants';\nimport axiosClient from '../../service/axiosClient';\nimport Toast from '../Toast/Toast';\nimport { ROLE_TABLE } from '../../constants/Constants';\n\nclass Auth {\n  constructor() {\n    this.userInfo = null;\n  }\n\n  isAuthenticated = () => {\n    const access_token = localStorage.getItem(ACCESS_TOKEN);\n    return !!access_token;\n  };\n\n  login = ({ username, password }, successCallback, failCallback) => {\n    const data = {\n      username,\n      password\n    };\n    axiosClient\n      .post('/auth/login', data)\n      .then((res) => {\n        localStorage.setItem(ACCESS_TOKEN, res.data[ACCESS_TOKEN]);\n        successCallback();\n      })\n      .catch((err) => {\n        failCallback(err.data ? err.data : err);\n      });\n  };\n\n  logoutOld = () => {\n    axiosClient\n      .post('/auth/logout')\n      .then((res) => {\n        localStorage.removeItem(ACCESS_TOKEN);\n        window.location = '/';\n      })\n      .catch((err) => {\n        Toast.error(err);\n      });\n  };\n\n  logout = () => {\n    localStorage.removeItem(ACCESS_TOKEN);\n    window.location = '/';\n  };\n\n  getMe = () => {\n    return axiosClient.get('/auth/me');\n  };\n\n  redirectToLoginPage = (response) => {\n    if (localStorage.getItem(ACCESS_TOKEN)) {\n      Toast.error('Access token has been expired!');\n      localStorage.removeItem(ACCESS_TOKEN);\n    } else if (response && response.data) {\n      Toast.error(response.data.message);\n    } else {\n      Toast.info('You need to login first!');\n    }\n    window.location.hash = '/login';\n  };\n\n  /**\n   * Check xem mảng roles có tồn tại role nào có quyền truy cập path hay ko\n   * @param {string[]} roles - Array of role\n   * @param {string} path - URL\n   */\n  rolesHasPermission = (roles, path) => {\n    if (!ROLE_TABLE[path]) return true;\n    for (const role of roles) {\n      if (ROLE_TABLE[path].includes(role)) {\n        // console.log(`User can access protected path = ${path}`);\n        return true;\n      }\n    }\n    // Dùng forEach: bất đồng bộ nên ko được nhé!\n    // Nó sẽ return false trước khi chạy vào trong forEach\n    // roles.forEach(role => {\n    //   if (ROLE_TABLE[path].includes(role)) return true;\n    // });\n    return false;\n  };\n}\n\nexport let auth = new Auth();\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { auth } from './Auth';\n\nconst PrivateRoute = ({ component: Component, userInfo, ...rest }) => {\n  return (\n    // Show the component only when the user is logged in\n    // Otherwise, redirect the user to /login page\n    <Route\n      {...rest}\n      render={(props) => {\n        if (!auth.isAuthenticated()) {\n          return (\n            // Chưa login, redirect về trang login\n            <Redirect\n              to={{\n                pathname: '/login',\n                state: { from: props.location }\n              }}\n            />\n          );\n        } else if (\n          userInfo &&\n          !auth.rolesHasPermission(userInfo.roleArray, props.location.pathname)\n        ) {\n          // Đã login nhưng ko có quyền vào trang này\n          return (\n            <div>\n              <h2>Oops! Access denied!</h2>\n              <p>You don't have permission to access this page.</p>\n            </div>\n          );\n        } else {\n          return <Component {...props} userInfo={userInfo} />;\n        }\n      }}\n    />\n  );\n};\n\nexport default PrivateRoute;\n\n/*\n<Component {...props} userInfo={userInfo} />\nHiện tại chưa thấy dùng props\n*/\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { auth } from './Auth';\n\nconst RestrictedRoute = ({ component: Component, ...rest }) => {\n  return (\n    // Show the component only when the user is NOT logged in\n    // Otherwise, redirect the user to home page\n    <Route\n      {...rest}\n      render={(props) =>\n        auth.isAuthenticated() ? <Redirect to=\"/\" /> : <Component {...props} />\n      }\n    />\n  );\n};\n\nexport default RestrictedRoute;\n\n/*\n<Component {...props} />:\nCần truyền các props của Route cho component để nó đọc giá trị location.state.from, dùng để redirect\n(Xem bên component Login)\n*/\n","import React from 'react';\nimport './LoadingIcon.scss';\n\n/**\n * Ref: https://loading.io/css/\n */\nconst LoadingIcon = (props) => {\n  const { show, fullscreen = true } = props;\n  const className = fullscreen ? 'loading-fs' : '';\n  return show ? (\n    <div className={className}>\n      <div className=\"lds-ring\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport default LoadingIcon;\n","import React from 'react';\nimport loadable from '@loadable/component';\nimport LoadingIcon from './LoadingIcon';\n\nconst Loading = (props) => {\n  if (props.error) {\n    return (\n      <div>\n        Error! <button onClick={props.retry}>Retry</button>\n      </div>\n    );\n  } else if (props.timedOut) {\n    return (\n      <div>\n        Taking a long time... <button onClick={props.retry}>Retry</button>\n      </div>\n    );\n  } else if (props.pastDelay) {\n    return <LoadingIcon show={true} />;\n  } else {\n    return null;\n  }\n};\n\n// Using Loadable is simple. All you need to do is pass in a function which loads\n// your component and a \"Loading\" component to show while your component loads.\nexport const Nav = loadable(() => import('../../components/Nav/Nav'), {\n  fallback: Loading({\n    pastDelay: true,\n    error: false,\n    timedOut: false\n  })\n});\n\nexport const Home = loadable(() => import('../../pages/Home/Home'), {\n  fallback: Loading({\n    pastDelay: true,\n    error: false,\n    timedOut: false\n  })\n});\n\nexport const Song = loadable(() => import('../../pages/Song/Song'), {\n  fallback: Loading({\n    pastDelay: true,\n    error: false,\n    timedOut: false\n  })\n});\n\nexport const About = loadable(() => import('../../pages/About/About'), {\n  fallback: Loading({\n    pastDelay: true,\n    error: false,\n    timedOut: false\n  })\n});\n\nexport const Login = loadable(() => import('../../pages/Login/Login'), {\n  fallback: Loading({\n    pastDelay: true,\n    error: false,\n    timedOut: false\n  })\n});\n\nexport const NotFound = loadable(() => import('../../pages/NotFound/NotFound'), {\n  fallback: Loading({\n    pastDelay: true,\n    error: false,\n    timedOut: false\n  })\n});\n","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport { auth } from './components/Auth/Auth';\nimport PrivateRoute from './components/Auth/PrivateRoute';\nimport RestrictedRoute from './components/Auth/RestrictedRoute';\nimport * as Loadable from './components/Loadable/Loadable';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './scss/App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInfo: null\n    };\n  }\n\n  componentDidMount() {\n    const isAuthenticated = auth.isAuthenticated();\n    if (isAuthenticated) {\n      auth\n        .getMe()\n        .then((res) => {\n          this.setState({\n            userInfo: res.data\n          });\n        })\n        .catch((err) => {\n          console.log('Error: ', err);\n        });\n    }\n  }\n\n  render() {\n    const { userInfo } = this.state;\n    return (\n      <HashRouter>\n        <div className=\"app\">\n          <Loadable.Nav userInfo={userInfo} />\n          <div className=\"app-content\">\n            <Switch>\n              <Route exact path=\"/\" component={Loadable.Home} />\n              <Route exact path=\"/about\" component={Loadable.About} />\n              <RestrictedRoute exact path=\"/login\" component={Loadable.Login} />\n              <PrivateRoute exact path=\"/song\" component={Loadable.Song} userInfo={userInfo} />\n              <Route path=\"\" component={Loadable.NotFound} />\n            </Switch>\n          </div>\n        </div>\n        <ToastContainer />\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}